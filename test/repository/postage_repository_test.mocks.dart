// Mocks generated by Mockito 5.3.2 from annotations
// in check_postage_app/test/repository/postage_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:check_postage_app/app/core/error/failure.dart' as _i5;
import 'package:either_dart/either.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

import 'postage_repository_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostageRemoteDataTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostageRemoteDataTest extends _i1.Mock
    implements _i3.PostageRemoteDataTest {
  @override
  _i4.Future<_i2.Either<_i5.Failure, dynamic>> getDataProvince() =>
      (super.noSuchMethod(
        Invocation.method(
          #getDataProvince,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, dynamic>>.value(
            _FakeEither_0<_i5.Failure, dynamic>(
          this,
          Invocation.method(
            #getDataProvince,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, dynamic>>.value(
                _FakeEither_0<_i5.Failure, dynamic>(
          this,
          Invocation.method(
            #getDataProvince,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, dynamic>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, dynamic>> getDataCity(String? idProv) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDataCity,
          [idProv],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, dynamic>>.value(
            _FakeEither_0<_i5.Failure, dynamic>(
          this,
          Invocation.method(
            #getDataCity,
            [idProv],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, dynamic>>.value(
                _FakeEither_0<_i5.Failure, dynamic>(
          this,
          Invocation.method(
            #getDataCity,
            [idProv],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, dynamic>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, dynamic>> getDataPostage(
    String? origin,
    String? destination,
    String? weight,
    String? courier,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDataPostage,
          [
            origin,
            destination,
            weight,
            courier,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, dynamic>>.value(
            _FakeEither_0<_i5.Failure, dynamic>(
          this,
          Invocation.method(
            #getDataPostage,
            [
              origin,
              destination,
              weight,
              courier,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, dynamic>>.value(
                _FakeEither_0<_i5.Failure, dynamic>(
          this,
          Invocation.method(
            #getDataPostage,
            [
              origin,
              destination,
              weight,
              courier,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, dynamic>>);
}
